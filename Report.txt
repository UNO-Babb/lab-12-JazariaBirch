Name:

Number of elements:10,000

Bubble Sort
Sorted:9.00360
Reversed:16.99877
Random:9.31608

Bubble Sort Early Exit
Sorted:0.00058
Reversed:6.04287
Random:4.43303

Selection Sort
Sorted:1.94298
Reversed:1.87144
Random:1.99540

Insertion Sort
Sorted:0.00093
Reversed:3.82555
Random:1.92453

Merge Sort
Sorted:0.02250
Reversed:0.01603   
Random:0.02522

Questions to answer:
1) What was the worst case scenario for any sorting technique?


2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?


3) Why was merge sort so much more efficient?


4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?


5) What issues can you see with a recursive sorting technique like merge sort?
