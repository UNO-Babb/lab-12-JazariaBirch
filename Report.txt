Name:

Number of elements:10,000

Bubble Sort
Sorted:9.00360
Reversed:16.99877
Random:9.31608

Bubble Sort Early Exit
Sorted:0.00058
Reversed:6.04287
Random:4.43303

Selection Sort
Sorted:1.94298
Reversed:1.87144
Random:1.99540

Insertion Sort
Sorted:0.00093
Reversed:3.82555
Random:1.92453

Merge Sort
Sorted:0.02250
Reversed:0.01603   
Random:0.02522

Questions to answer:
1) What was the worst case scenario for any sorting technique?
Bubble Sort had the highest runtime on the reversed list, taking 16.99877 seconds.
Bubble Sort Early Exit had a better runtime but was still noticeably higher on the reversed list at 6.04287 seconds.

2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?
Bubble Sort is less efficient due to redundant swaps. Bubble Sort Early Exit optimizes with an early stop if no swaps occur. 
Selection Sort minimizes swaps but still has O(n²) comparisons.


3) Why was merge sort so much more efficient?
Merge Sort has a time complexity of O(n log n), making it faster for large lists compared to O(n²) algorithms.

4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?
Insertion Sort is faster for small lists due to its O(n) complexity, reducing overhead compared to recursive merge sort.

5) What issues can you see with a recursive sorting technique like merge sort?
Space complexity: It requires extra space (O(n)) for merging.
Stack overflow: Deep recursion can lead to stack overflow.
Overhead: Recursive calls add extra function call overhead.